package com.me.mygdxgame;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.utils.TimeUtils;

public class Player extends WorldObject {//Character {
	
	private int coin;
    protected boolean isWasd;
    //*********
	protected TextureRegion[] frameRegions;
	protected TextureRegion[] frameregion2;
	protected Animation nAnimation;
	protected Animation sAnimation;
	protected Animation eAnimation;
	protected Animation wAnimation;
	protected Animation nRest;
	protected Animation sRest;
	protected Animation eRest;
	protected Animation wRest;
	protected Animation currentAnim;
    //************
	protected OrthographicCamera camera;
	protected OrthographicCamera lightCamera;
	protected OrthographicCamera hudCam;
	public HUD hud;
	//**********
	protected float stateTime;
	public int width;
	public int height;
	//**********
	public boolean xDown; //temp iskeydown X
	public boolean zDown;
	public ArrayList<Projectile> projectiles;
	public long shotTime;
	public int health;
	public boolean isUp;
	public boolean isRight;
	
<<<<<<< HEAD
	public Player(int x, int y, OrthographicCamera camera, OrthographicCamera lightCamera, boolean isWasd, String texturePath) {
        super(Player.createBody(x, y, 16, 28), false);//, null);
//        setTexturePath(texturePath);
		this.camera = camera;
		this.lightCamera = lightCamera;
        this.isWasd = isWasd;
        //this.setRegion(currentAnim.getKeyFrame(stateTime));
=======
	public Player(int x, int y, OrthographicCamera camera, OrthographicCamera lightCamera, boolean isWasd) {
        super(Player.createBody(x, y, 16, 28, (short) -1), true);
		this.camera = camera;
		this.lightCamera = lightCamera;
        this.isWasd = isWasd;
>>>>>>> origin/Will's_Totally_Epic_Branch_of_Development
        coin = 100;
        hudCam = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        health = 2;
        isUp = false;
        isRight = true;
        
        hud = new HUD(hudCam, health);
        
	}

	public static Body createBody(float x, float y, int tWidth, int tHeight, short gIndex) {
		BodyDef def = new BodyDef();
		def.fixedRotation = true;
		def.position.set(x * Values.PIXEL_BOX, y * Values.PIXEL_BOX);
		def.type = BodyType.DynamicBody;

		//creates a diamond shape for collision
		PolygonShape shape = new PolygonShape();
		Vector2[] verts = new Vector2[4];
		float boxW = tWidth * Values.PIXEL_BOX;
		float boxH = tHeight * Values.PIXEL_BOX;
		verts[0] = new Vector2(0, boxH / 2);
		verts[1] = new Vector2(boxW / 2, 0);
		verts[2] = new Vector2(0, -(boxH / 2));
		verts[3] = new Vector2(-(boxW / 2), 0);
		shape.set(verts);

		Body body = Values.world.createBody(def);

        FixtureDef fixDef = new FixtureDef();
        fixDef.shape = shape;
        fixDef.density = 1f;
        fixDef.filter.groupIndex = gIndex;
		body.createFixture(fixDef);

        return body;
	}

    @Override
    public void create() {
        super.create();
        
        //********************************
        width = 16;
        height = 28;
        TextureRegion[][] tRegions = Sprite.split(new Texture(Gdx.files.internal("data/Bookworm_Sheet1.png")), width, height);
        frameRegions = new TextureRegion[tRegions.length * tRegions[0].length];
        int index = 0;
        for (TextureRegion[] tRegion : tRegions) {
            for (TextureRegion aTRegion : tRegion) {
                frameRegions[index++] = aTRegion;
            }
        }
        float animSpeed = .2f;
        nAnimation = new Animation(animSpeed, frameRegions[7], frameRegions[6], frameRegions[5], frameRegions[4]);
        sAnimation = new Animation(animSpeed, frameRegions[0], frameRegions[1], frameRegions[2], frameRegions[3]);
        eAnimation = new Animation(animSpeed, frameRegions[8], frameRegions[9], frameRegions[10], frameRegions[11]);
        wAnimation = new Animation(animSpeed, frameRegions[15], frameRegions[14], frameRegions[13], frameRegions[12]);
        nRest = new Animation(animSpeed, frameRegions[24], frameRegions[25], frameRegions[26], frameRegions[27]);
        sRest = new Animation(animSpeed, frameRegions[31], frameRegions[30], frameRegions[29], frameRegions[28]);
        eRest = new Animation(animSpeed, frameRegions[16], frameRegions[17], frameRegions[18],frameRegions[19]);
        wRest = new Animation(animSpeed, frameRegions[23], frameRegions[22], frameRegions[21], frameRegions[20]);
        nAnimation.setPlayMode(Animation.LOOP);
        sAnimation.setPlayMode(Animation.LOOP);
        eAnimation.setPlayMode(Animation.LOOP);
        wAnimation.setPlayMode(Animation.LOOP);
        nRest.setPlayMode(Animation.LOOP);
        sRest.setPlayMode(Animation.LOOP);
        eRest.setPlayMode(Animation.LOOP);
        wRest.setPlayMode(Animation.LOOP);
        currentAnim = nAnimation;
        stateTime = 0;
        //*************************************8
        projectiles = new ArrayList<Projectile>();
        xDown = false;
        sprite = new Sprite(currentAnim.getKeyFrame(stateTime));

        sprite.setRegion(currentAnim.getKeyFrame(stateTime));
    }
    
    @Override
	public void draw(SpriteBatch spriteBatch) {
        super.draw(spriteBatch);
        sprite.setRegion(currentAnim.getKeyFrame(stateTime));
        for (int i = 0; i < projectiles.size(); i++) {
            projectiles.get(i).draw(spriteBatch);
        }
	}
	
	public void createProjectile() {
		ParticleProjectile projectile = new ParticleProjectile(sprite.getX() + (width / 2), sprite.getY() + (height / 2), Values.fireWandPool);
        float speed = .2f;
		if (Gdx.input.isKeyPressed(Keys.UP)) {
			projectile.body.applyLinearImpulse(0, speed, projectile.pos.x, projectile.pos.y, true);
		}else if (Gdx.input.isKeyPressed(Keys.DOWN)) {
			projectile.body.applyLinearImpulse(0, -speed, projectile.pos.x, projectile.pos.y, true);
		}else if (Gdx.input.isKeyPressed(Keys.LEFT)) {
			projectile.body.applyLinearImpulse(-speed, 0, projectile.pos.x,  projectile.pos.y, true);
		}else if (Gdx.input.isKeyPressed(Keys.RIGHT)) {
			projectile.body.applyLinearImpulse(speed, 0, projectile.pos.x, projectile.pos.y, true);
		} else {
			projectile.body.applyLinearImpulse(0, speed, projectile.pos.x, projectile.pos.y, true);
		}
		projectile.sound.play();
		projectiles.add(projectile);
		shotTime = TimeUtils.nanoTime();
	}

    @Override
    public void update() {
        super.update();
        hud.setCoin(coin);
        ArrayList<Projectile> itemsToRemove = new ArrayList<Projectile>();
        for (Projectile projectile : projectiles) {
            projectile.update();
            if (projectile.isDestroyed) {
                itemsToRemove.add(projectile);
            }
        }
        projectiles.removeAll(itemsToRemove);
        float speed = 3f;
        float xAxis = 0;
        float yAxis = 0;
        Vector2 linV;
        xDown = Gdx.input.isKeyPressed(Keys.X);
        if(!xDown) {
        	//*********************ALL WILL CHANGE FOR OUYA, THIS IS TEST STUFFS************************
	        if (!isWasd) {
	            if (Gdx.input.isKeyPressed(Keys.UP)) {
	            	isUp = true;
	            	yAxis = 1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.DOWN)) {
	            	isUp = false;
	            	yAxis = -1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.LEFT)) {
	            	isRight = false;
	            	xAxis = -1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.RIGHT)) {
	            	isRight = true;
	            	xAxis = 1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (!Gdx.input.isKeyPressed(Keys.UP)&&!Gdx.input.isKeyPressed(Keys.DOWN)&&!Gdx.input.isKeyPressed(Keys.LEFT)&&!Gdx.input.isKeyPressed(Keys.RIGHT)) {
	            	xAxis = 0;
	            	yAxis = 0;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            linV = new Vector2(xAxis*speed, yAxis*speed);
	            this.body.setLinearVelocity(linV);
	            animate();
	        }
	        if (isWasd) {
	        	if (Gdx.input.isKeyPressed(Keys.W)) {
	            	isUp = true;
	            	yAxis = 1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.S)) {
	            	isUp = false;
	            	yAxis = -1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.A)) {
	            	isRight = false;
	            	xAxis = -1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (Gdx.input.isKeyPressed(Keys.D)) {
	            	isRight = true;
	            	xAxis = 1;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            if (!Gdx.input.isKeyPressed(Keys.W)&&!Gdx.input.isKeyPressed(Keys.S)&&!Gdx.input.isKeyPressed(Keys.A)&&!Gdx.input.isKeyPressed(Keys.D)) {
	            	xAxis = 0;
	            	yAxis = 0;
	                stateTime += Gdx.graphics.getDeltaTime();
	            }
	            linV = new Vector2(xAxis*speed, yAxis*speed);
	            this.body.setLinearVelocity(linV);
	            animate();
	    //***********************END TEST STUFFS*******************************************
        //testing git! Woo this is totally a test!
        }
        }
        camera.position.x = sprite.getX();
        camera.position.y = sprite.getY();
        lightCamera.position.x = sprite.getX() * Values.PIXEL_BOX;
        lightCamera.position.y = sprite.getY() * Values.PIXEL_BOX;
        
    }

    public int getCoin() {
		return coin;
	}

	public void setCoin(int coin) {
		this.coin = coin;
	}
	
	public void addCoin(float coin) {
		this.coin += coin;
		System.out.println(this.coin);
	}
	
	public void animate() {
		if (!Gdx.input.isKeyPressed(Keys.UP)&&!Gdx.input.isKeyPressed(Keys.DOWN)&&!Gdx.input.isKeyPressed(Keys.LEFT)&&!Gdx.input.isKeyPressed(Keys.RIGHT)) {
			//stateTime = 0;
			if (isRight && !isUp) {
            	currentAnim = eRest;
            } else if (!isRight && !isUp) {
            	currentAnim = wRest;
            } else if (isRight && isUp) {
            	currentAnim = nRest;
            } else {
            	currentAnim = sRest;
            }
		} else {
			if (isRight && !isUp) {
            	currentAnim = eAnimation;
            } else if (!isRight && !isUp) {
            	currentAnim = wAnimation;
            } else if (isRight && isUp) {
            	currentAnim = sAnimation;
            } else {
            	currentAnim = nAnimation;
            }
		}
	}

}
